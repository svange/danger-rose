[project]
name = "danger-rose"
version = "0.1.0"
description = "A retro-style adventure game featuring Danger, Rose, and their snowboarding Dad"
license = {text = "MIT"}
authors = [
    {name = "Samuel Vange",email = "7166607+svange@users.noreply.github.com"}
]
readme = "README.md"
requires-python = ">=3.12,<3.14"

[tool.poetry]
package-mode = false

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
augint-github = "^1.3.1"
pytest = "^8.4.1"
pytest-html = "^4.1.1"
pytest-cov = "^6.2.1"
ruff = "^0.12.7"
pre-commit = "^4.2.0"
pyinstaller = "^6.14.2"
mypy = "^1.17.0"
pillow = "^11.3.0"


[tool.poetry.dependencies]
pygame-ce = "^2.5.5"

[tool.pytest.ini_options]
# Test discovery patterns
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Test paths
testpaths = ["tests/unit", "tests/integration"]

# Ignore paths
norecursedirs = [".git", ".tox", "build", "dist", "*.egg", "tools"]

# Coverage options
addopts = [
    "--strict-markers",
    "--tb=short",
    "-v",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=55",
    "--cov-config=.coveragerc",
]

# Markers for test categorization
markers = [
    "unit: Unit tests that test individual components in isolation",
    "integration: Integration tests that test multiple components together",
    "slow: Tests that take more than a few seconds to run",
    "visual: Tests that generate visual output (not run in CI)",
    "requires_display: Tests that require a display (skipped in headless environments)",
]

# Disable pytest warnings about unregistered marks
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.ruff]
# Core settings
line-length = 88
target-version = "py312"

# File selection
exclude = [
    "tools/visual/*.py",  # Visual test tools are allowed to have different import patterns
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".venv",
    "venv",
]

[tool.ruff.lint]
# Rule selection - comprehensive set for game development
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "B",    # flake8-bugbear
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T20",  # flake8-print (but we ignore T201 below for game dev)
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "PTH",  # flake8-use-pathlib
    "PL",   # Pylint
]

# Ignore specific rules
ignore = [
    "E501",  # line too long (handled by formatter)
    "T201",  # print statements (needed for game debug output)
    "PLR0913", # too many arguments (common in game constructors)
    "PLR2004", # magic values (common in games for coordinates, physics constants)
    "PLR0912", # too many branches (common in game logic)
    "PLR0915", # too many statements (common in update methods)
    "PLR0911", # too many return statements (common in state machines)
    "B007", # unused loop control variable (common in iterations)
    "B027", # empty method in abstract base class (design pattern)
    "PTH123", # open() vs Path.open() (gradual migration)
    "PTH202", # os.path.getsize vs Path.stat() (gradual migration)
    "PTH110", # os.path.exists vs Path.exists (gradual migration)
    "PLC0415", # import should be at top-level (sometimes needed for circular imports)
    "PLC0206", # dict iteration could use .items() (clarity)
    "PLW0603", # global statement (needed for singletons)
    "DTZ005", # datetime.now() without tz (game doesn't need timezone awareness)
    "RET504", # unnecessary assignment before return (clarity over brevity)
    "SIM102", # nested if statements (sometimes clearer)
    "SIM105", # try-except-pass (needed for optional features)
    "SIM108", # ternary operator (sometimes if-else is clearer)
    "SIM117", # multiple with statements (clarity)
    "PLR1714", # repeated equality comparisons (clarity)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["T201", "DTZ001", "SIM115"]  # Allow print, naive datetime, and file operations in tests
"src/main.py" = ["T201"]  # Allow print in main entry point
"src/scenes/pool.py" = ["N806"]  # Allow capitalized variables for class selection
"src/scenes/ski.py" = ["SIM105"]  # Allow try-except-pass for optional sound effects
"src/utils/sprite_loader.py" = ["PTH100", "PTH118", "PTH120"]  # Legacy path handling

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.ruff.format]
# Format settings - match Black's defaults
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
